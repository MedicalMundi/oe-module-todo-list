<?php declare(strict_types=1);


namespace MedicalMundi\TodoList\Tests\Unit\Todo;

use MedicalMundi\TodoList\Domain\Todo\TodoId;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class TodoIdTest extends TestCase
{
    private const UUID = '048a23d9-db59-4d49-87e0-36a05ee08593';

    /**
     * @test
     */
    public function can_be_created(): void
    {
        $todoId = TodoId::fromString(self::UUID);

        self::assertEquals(self::UUID, $todoId->toString());
    }

    /**
     * @test
     */
    public function can_be_autogenerated(): void
    {
        $todoId = TodoId::generate();

        self::assertTrue(Uuid::isValid($todoId->toString()));
    }

    /**
     * @test
     */
    public function should_return_value_as_string(): void
    {
        $todoId = TodoId::generate();

        self::assertIsString($todoId->toString());
        self::assertIsString($todoId->__toString());
    }

    /**
     * @test
     */
    public function can_be_compared(): void
    {
        $first = TodoId::fromString(self::UUID);
        $second = TodoId::generate();
        $copyOfFirst = TodoId::fromString(self::UUID);

        self::assertFalse($first->equals($second));
        self::assertTrue($first->equals($copyOfFirst));
        self::assertFalse($second->equals($copyOfFirst));
    }

    /**
     * @test
     * @dataProvider invalid_uuid_provider
     */
    public function should_throw_exception_for_invalid_value(string $uuid): void
    {
        $this->expectException(\InvalidArgumentException::class);

        TodoId::fromString($uuid);
    }

    /**
     * @return \Generator <array<int, string>>
     */
    public function invalid_uuid_provider(): \Generator
    {
        yield ['null'];
        yield [''];
        yield ['@'];
        yield ['048a23d9-db59-4d49-87e0-'];
    }
}
